on:
  push:
    branches: ["main"]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: yarn

      - name: Install dependencies
        run: yarn

      - name: Build the app
        run: |
          yarn build
          mkdir upload
          cp -r package.json yarn.lock upload/
          cp -r files/ upload/files/
          cp -r dist/ upload/dist/

      - uses: actions/upload-artifact@v4
        with:
          name: backend
          if-no-files-found: error
          path: upload/

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: yarn

      - name: Install dependencies
        working-directory: ./frontend
        run: yarn

      - name: Build the app
        working-directory: ./frontend
        env:
          NODE_ENV: production
          VITE_GA_ID: ${{ secrets.REACT_APP_GA_ID }}
        run: yarn build

      - uses: actions/upload-artifact@v4
        with:
          name: frontend
          path: frontend/dist/

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      MACHINE: rpi-audio
    needs:
      - build-backend
      - build-frontend
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: backend
          path: ${{github.workspace}}

      - uses: actions/download-artifact@v4
        with:
          name: frontend
          path: ${{github.workspace}}/frontend/build/

      - name: Display structure of downloaded files
        run: ls -R

      - name: Setup Tailscale
        id: tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Wait for Tailscale to be ready
        run: |
          # Wait for Tailscale to be ready by checking the .Health array
          for i in {1..10}; do
            HEALTH_STATUS=$(tailscale status --json | jq '.Health')
            if [ "$HEALTH_STATUS" == "[]" ]; then
              echo "Tailscale is healthy."
              break
            else
              echo "Tailscale health issues detected:"
              echo "$HEALTH_STATUS"
              echo "Retrying in 5 seconds..."
              sleep 5
            fi
          done

          # Final check to ensure readiness
          HEALTH_STATUS=$(tailscale status --json | jq '.Health')
          if [ "$HEALTH_STATUS" != "[]" ]; then
            echo "Tailscale did not become healthy in time." >&2
            echo "Final health issues: $HEALTH_STATUS" >&2
            exit 1
          fi

          # Tailscale is ready, so let's ping the host to ensure it's reachable
          MACHINE_IP="$(tailscale ip -4 $MACHINE)"
          if ! ping -c 1 -w 60 "$MACHINE_IP"; then
            echo "Machine at $MACHINE_IP is not reachable within the timeout period." >&2
            exit 1
          fi

          echo "Machine is reachable at $MACHINE_IP."

      - name: Add SSH key
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p $HOME/.ssh
          MACHINE_IP="$(tailscale ip -4 $MACHINE)"
          echo "$MACHINE -> $MACHINE_IP"
          ssh-keyscan $MACHINE_IP >> $HOME/.ssh/known_hosts
          echo "$SSH_KEY" > $HOME/.ssh/key
          chmod 600 $HOME/.ssh/key

      - name: Deploy
        run: |
          MACHINE_IP="$(tailscale ip -4 $MACHINE)"
          rsync -avr -e "ssh -i $HOME/.ssh/key" ./ "pi@[$MACHINE_IP]":/home/pi/auto-streaming-stt/
          ssh -i "$HOME/.ssh/key" "pi@$MACHINE_IP" 'cd /home/pi/auto-streaming-stt && yarn && pm2 restart index'
